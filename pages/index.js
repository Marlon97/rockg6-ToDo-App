import Head from "next/head";
import Image from "next/image";
import styles from "../styles/Home.module.scss";
import Popup from "../components/Popup";
import TaskList from "../components/TaskList";
import PopupRemove from "../components/PopupRemove";
import { useState } from "react";
import { signIn, signOut, useSession, getSession } from "next-auth/client";
import { ApolloClient, gql, InMemoryCache } from "@apollo/client";

const { GRAPHQL_SERVER } = process.env;

const client = new ApolloClient({
  uri: GRAPHQL_SERVER,
  cache: new InMemoryCache(),
});

const taskQuery = gql`
  query {
    tasks {
      title
      description
      start_date
      end_date
    }
  }
`;

const addUserMutation = gql`
  mutation($nombre: String, $correo: String, $secret: String) {
    addUser(nombre: $nombre, correo: $correo, secret: $secret) {
      nombre
      id
      correo
      secret
    }
  }
`;

// Sets the submit task window as hidden.
export default function Home({ tasks }) {
  const [hidden, setHidden] = useState(true);
  const [hiddenRemove, setHiddenRemove] = useState(null);
  const [session, loading] = useSession();

  if (!loading) {
    console.log(session);
  }

  const onFormSubmit = (data) => {
    tasks.push(data);
  };

  var toDelete;

  const pointElement = (element) => {
    toDelete = element;
  };

  return (
    <div className={styles.container}>
      <Head>
        <title>ToDo App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      {!session && (
        <>
          <button
            onClick={() => signIn()}
            className={styles["btn-abrir-popup"]}
          >
            Sign in
          </button>
        </>
      )}

      {session && (
        <>
          <button
            onClick={() => signOut()}
            className={styles["btn-abrir-popup"]}
          >
            Sign out
          </button>
        </>
      )}
      <main className={styles.main}>
        <h1 className={styles.title}>Your ToDo's</h1>

        <p className={styles.description}>Let's start by adding a task</p>
      </main>

      <div className={styles.forms}>
        <div className={styles["main-buttons"]}>
          {!session && (
            <>
              Not signed in. Please sign in to add tasks <br />
            </>
          )}
          {session && (
            <>
              <button
                onClick={() => setHidden(false)}
                id="btn-abrir-popup"
                className={styles["btn-abrir-popup"]}
              >
                Add new task
              </button>
              <br />
              <div className={styles.profile}>
                <Image src={session.user.image} width="30" height="30"></Image>
                <p>Signed in as {session.user.name} </p>
              </div>
              <br />
            </>
          )}
        </div>
      </div>

      {session && (
        <TaskList
          tasks={tasks}
          open={setHidden}
          close={setHiddenRemove}
          point={pointElement}
        />
      )}

      {!hidden && (
        <Popup onceSubmited={(data) => onFormSubmit(data)} close={setHidden} />
      )}
      {hiddenRemove !== null && (
        <PopupRemove
          close={setHiddenRemove}
          item={hiddenRemove}
          tasks={tasks}
        />
      )}
    </div>
  );
}

export async function getServerSideProps(context) {
  const session = await getSession(context);

  if (session) {
    const addUserData = await client.query({
      query: addUserMutation,
      variables: {
        nombre: session.user.name,
        correo: session.user.email,
        secret: session.user.name,
      },
      fetchPolicy: "no-cache",
    });
  }

  const taskData = await client.query({
    query: taskQuery,
    fetchPolicy: "no-cache",
  });

  return {
    props: {
      tasks: taskData.data.tasks,
    }, // will be passed to the page component as props
  };
}
